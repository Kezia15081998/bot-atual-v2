import 'dotenv/config'; // Carrega vari√°veis de ambiente do .env
import TelegramBot from 'node-telegram-bot-api';
import { getHistoryBlaze } from './blazeApi.js';
import { analyzeSequence } from './analyzeSequence.js';
import { saveSequences } from './db.js';
// Importa a nova fun√ß√£o flex√≠vel e remove a antiga se n√£o for mais usada diretamente aqui
import { findFlexibleMatchingSequence } from './matchingSequence.js'; 
import { calculateFrequencies, analyzeCurrentStreak } from './statistics.js'; // Importa as novas fun√ß√µes
import emitter from './websocket.js';
import c from 'chalk';

// --- Configura√ß√µes --- 
const FREQUENCY_WINDOW_SIZE = 100; // Janela para c√°lculo de frequ√™ncia (√∫ltimos 100 resultados)
const MIN_PATTERN_MATCH_LENGTH = 3; // Define o tamanho m√≠nimo de padr√£o para enviar notifica√ß√£o (ex: 3 ou 4)
// ---------------------

// Configura√ß√£o do Bot do Telegram
const token = process.env.TELEGRAM_BOT_TOKEN;
const chatId = process.env.TELEGRAM_CHAT_ID;

if (!token || !chatId) {
  console.error(c.red('Erro: Vari√°veis de ambiente TELEGRAM_BOT_TOKEN e TELEGRAM_CHAT_ID n√£o definidas.'));
  console.log(c.yellow('Crie um arquivo .env na raiz do projeto e adicione as vari√°veis. Veja .env.example.'));
  process.exit(1); // Encerra o script se as vari√°veis n√£o estiverem definidas
}

const bot = new TelegramBot(token);

console.log(c.blue('Bot do Telegram inicializado com l√≥gica aprimorada. Aguardando eventos...'));

const rounds = {}; // Armazena a previs√£o para cada rodada ativa

const colorsNumbered = {
  ['0']: '‚ö™Ô∏è Branco',
  ['1']: 'üî¥ Vermelho',
  ['2']: '‚ö´Ô∏è Preto',
};

const colorsNumberedInverted = {
  'white': '0',
  'red': '1',
  'black': '2',
};

// --- Listener para Nova Rodada --- 
emitter.on('newRoll', async (data) => {
  try {
    const history = await getHistoryBlaze();
    // Precisa de pelo menos o tamanho m√≠nimo de padr√£o para tentar encontrar correspond√™ncia
    if (!history || history.length < MIN_PATTERN_MATCH_LENGTH) { 
        console.log(c.yellow(`Hist√≥rico insuficiente (${history?.length || 0}) para an√°lise de padr√£o m√≠nimo (${MIN_PATTERN_MATCH_LENGTH}).`));
        return;
    }

    const lastResults = history.slice(-4); // Pega at√© os √∫ltimos 4 para an√°lise completa

    // Salva novas sequ√™ncias encontradas no hist√≥rico completo (baseado em 5 elementos)
    const sequencesResults = analyzeSequence(history);
    const allSequences = saveSequences(sequencesResults);

    // --- L√≥gica de Previs√£o Aprimorada ---
    // 1. Tenta encontrar correspond√™ncia flex√≠vel (4, 3 ou 2)
    const patternMatch = findFlexibleMatchingSequence(lastResults, allSequences);

    // Calcula estat√≠sticas adicionais independentemente de encontrar padr√£o
    const frequencies = calculateFrequencies(history, FREQUENCY_WINDOW_SIZE);
    const currentStreak = analyzeCurrentStreak(history);

    // Prepara informa√ß√µes adicionais para a mensagem
    const freqMsg = `Frequ√™ncia (√∫ltimos ${frequencies.total}): ${colorsNumbered['1']} ${frequencies.percentages['1']}% | ${colorsNumbered['2']} ${frequencies.percentages['2']}% | ${colorsNumbered['0']} ${frequencies.percentages['0']}%`;
    const streakMsg = currentStreak.length > 1 ? `Sequ√™ncia Atual: ${colorsNumbered[currentStreak.color]} x${currentStreak.length}` : 'Sem sequ√™ncia atual (maior que 1)';

    console.log(c.magenta(freqMsg));
    console.log(c.magenta(streakMsg));

    // 2. Decide se envia notifica√ß√£o baseado no padr√£o encontrado
    if (patternMatch && patternMatch.length >= MIN_PATTERN_MATCH_LENGTH) {
      const { prediction: predictedColorIndex, length: matchLength } = patternMatch;
      const relevantLastResults = lastResults.slice(-matchLength); // Pega os √∫ltimos N resultados que formaram o padr√£o
      const parsedLastResults = relevantLastResults.map((color) => colorsNumbered[color]);
      const prediction = colorsNumbered[predictedColorIndex];

      console.log(`√öLTIMOS ${matchLength} RESULTADOS: ${c.cyan(parsedLastResults.join(' '))}`);
      console.log(`PADR√ÉO (MATCH ${matchLength}) ENCONTRADO -> PREVIS√ÉO: ${c.green(prediction)}`);

      // Envia a previs√£o para o Telegram com informa√ß√µes adicionais
      const message = 
`üö® *Poss√≠vel Entrada Identificada (Padr√£o ${matchLength})* üö®

√öltimos ${matchLength}: ${parsedLastResults.join(' ')}
üéØ Previs√£o (Padr√£o ${matchLength}): *${prediction}*

üìä ${freqMsg}
üìà ${streakMsg}`;

      try {
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        console.log(c.blue(`Mensagem de previs√£o (baseada em padr√£o ${matchLength}) enviada para o Telegram.`));
      } catch (telegramError) {
        console.error(c.red('Erro ao enviar mensagem de previs√£o para o Telegram:'), telegramError.message || telegramError);
      }

      // Armazena a previs√£o e o tipo/tamanho do match para a rodada atual
      rounds[data.id] = { prediction: predictedColorIndex, type: `pattern-${matchLength}` };
    } else {
        if (patternMatch) {
            console.log(c.yellow(`Padr√£o encontrado (Match ${patternMatch.length}), mas abaixo do m√≠nimo (${MIN_PATTERN_MATCH_LENGTH}) para notificar.`));
        } else {
            console.log(c.yellow('Nenhum padr√£o correspondente encontrado.'));
        }
        // Poder√≠amos adicionar l√≥gica aqui para prever baseado S√ì em frequ√™ncia/streak se quis√©ssemos, mas por enquanto s√≥ notificamos por padr√£o
    }

  } catch (error) {
    console.error(c.red('Erro no manipulador newRoll:'), error);
  }
});

// --- Listener para Rodada Completa --- 
emitter.on('rollComplete', async (data) => {
  const roundInfo = rounds[data.id];
  // S√≥ processa se t√≠nhamos uma previs√£o para esta rodada
  if (!roundInfo) return;

  const actualColorName = data.color; // 'red', 'black', 'white'
  if (!actualColorName || colorsNumberedInverted[actualColorName.toLowerCase()] === undefined) {
      console.error(c.red('Erro: Cor inv√°lida ou indefinida recebida em rollComplete:'), actualColorName, data);
      delete rounds[data.id];
      return;
  }
  const actualColorIndex = colorsNumberedInverted[actualColorName.toLowerCase()];
  const predictedColorIndex = roundInfo.prediction;

  const actualResultFormatted = colorsNumbered[actualColorIndex];
  const expectedResultFormatted = colorsNumbered[predictedColorIndex];

  let resultMessage = '';
  let consoleMsg = '';

  // Usa o tipo de previs√£o armazenado (ex: 'pattern-4', 'pattern-3')
  const predictionType = roundInfo.type || 'padr√£o'; 

  if (String(actualColorIndex) === String(predictedColorIndex)) {
    consoleMsg = `${c.green('DEU BOM (GREEN):')} Resultado: ${c.cyan(actualResultFormatted)} | Previs√£o (${predictionType}): ${c.cyan(expectedResultFormatted)}`;
    resultMessage = `‚úÖ *GREEN!* ‚úÖ\n\nResultado: ${actualResultFormatted}\nPrevis√£o (${predictionType}): ${expectedResultFormatted}`;
  } else {
    consoleMsg = `${c.red('DEU RUIM (RED):')} Resultado: ${c.cyan(actualResultFormatted)} | Previs√£o (${predictionType}): ${c.cyan(expectedResultFormatted)}`;
    resultMessage = `‚ùå *RED!* ‚ùå\n\nResultado: ${actualResultFormatted}\nPrevis√£o (${predictionType}): ${expectedResultFormatted}`;
  }

  console.log(consoleMsg + '\n');

  // Envia o resultado para o Telegram
  try {
    await bot.sendMessage(chatId, resultMessage, { parse_mode: 'Markdown' });
    console.log(c.blue('Mensagem de resultado enviada para o Telegram.'));
  } catch (telegramError) {
    console.error(c.red('Erro ao enviar mensagem de resultado para o Telegram:'), telegramError.message || telegramError);
  }

  // Limpa a previs√£o para esta rodada
  delete rounds[data.id];
});

// --- Tratamento de Erros Gerais --- 
emitter.on('error', (error) => {
  console.error(c.red('Erro no EventEmitter (WebSocket?):'), error);
});

process.on('uncaughtException', (error) => {
  console.error(c.red('Erro n√£o capturado:'), error);
  // Considerar notificar via Telegram sobre falha cr√≠tica
});

process.on('unhandledRejection', (reason, promise) => {
  console.error(c.red('Rejei√ß√£o n√£o tratada:'), promise, 'raz√£o:', reason);
  // Considerar notificar via Telegram sobre falha cr√≠tica
});

